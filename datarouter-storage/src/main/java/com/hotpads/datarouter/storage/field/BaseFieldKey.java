package com.hotpads.datarouter.storage.field;

import java.lang.reflect.Type;
import java.util.Objects;

import com.google.common.reflect.TypeToken;
import com.hotpads.datarouter.storage.field.encoding.FieldGeneratorType;
import com.hotpads.util.core.bytes.StringByteTool;
import com.hotpads.util.core.exception.NotImplementedException;

public abstract class BaseFieldKey<T>
implements FieldKey<T>{

	protected final String name;//the name of the java field
	protected final String columnName;//defaults to name if not specified
	protected final boolean nullable;
	protected final FieldGeneratorType fieldGeneratorType;
	protected final T defaultValue;
	protected final Type valueType;

	/*************************** constructor *********************************/

	public BaseFieldKey(String name, TypeToken<T> valueType){
		this(name, true, valueType, FieldGeneratorType.NONE);
	}

	public BaseFieldKey(String name, Class<T> valueType){
		this(name, TypeToken.of(valueType));
	}

	public BaseFieldKey(String name, TypeToken<T> valueType, T defaultValue){
		this(name, name, true, valueType, FieldGeneratorType.NONE, defaultValue);
	}

	public BaseFieldKey(String name, Class<T> valueType, T defaultValue){
		this(name, TypeToken.of(valueType), defaultValue);
	}

	//use java field name for columnName
	public BaseFieldKey(String name, boolean nullable, TypeToken<T> valueType, FieldGeneratorType fieldGeneratorType){
		this(name, name, nullable, valueType, fieldGeneratorType, null);
	}

	public BaseFieldKey(String name, boolean nullable, Class<T> valueType, FieldGeneratorType fieldGeneratorType){
		this(name, nullable, TypeToken.of(valueType), fieldGeneratorType);
	}

	public BaseFieldKey(String name, String columnName, boolean nullable, TypeToken<T> valueType,
			FieldGeneratorType fieldGeneratorType){
		this(name, columnName, nullable, valueType, fieldGeneratorType, null);
	}

	public BaseFieldKey(String name, String columnName, boolean nullable, Class<T> valueType,
			FieldGeneratorType fieldGeneratorType){
		this(name, columnName, nullable, TypeToken.of(valueType), fieldGeneratorType);
	}

	public BaseFieldKey(String name, String columnName, boolean nullable, Class<T> valueType,
			FieldGeneratorType fieldGeneratorType, T defaultValue){
		this(name, columnName, nullable, TypeToken.of(valueType), fieldGeneratorType, defaultValue);
	}

	public BaseFieldKey(String name, String columnName, boolean nullable, TypeToken<T> valueType,
			FieldGeneratorType fieldGeneratorType, T defaultValue){
		this.name = name;
		this.columnName = columnName;
		this.nullable = nullable;
		this.valueType = valueType.getType();
		this.fieldGeneratorType = fieldGeneratorType;
		this.defaultValue = defaultValue;
	}

	/******************************** methods *******************************/

	@Override
	public String toString(){
		return "[" + getClass().getSimpleName() + ":" + name + "]";
	}

	@Override
	public boolean isFixedLength(){
		return true;
	}

	@Override
	public boolean isCollection(){
		return false;
	}

	//don't cache this until we are using keys where it would be allocated on every equals/hashCode/compareTo
	@Override
	public byte[] getColumnNameBytes(){
		return StringByteTool.getUtf8Bytes(columnName);
	}

	@Override
	public T getDefaultValue(){
		return defaultValue;
	}

	@Override
	public Type getValueType(){
		return valueType;
	}

	/********************************** get/set ******************************************/

	@Override
	public String getName(){
		return name;
	}

	@Override
	public String getColumnName(){
		return columnName;
	}

	@Override
	public boolean isNullable(){
		return nullable;
	}

	@Override
	public FieldGeneratorType getAutoGeneratedType(){
		return fieldGeneratorType;
	}

	@Override
	public T generateRandomValue(){
		throw new NotImplementedException();
	}

	@Override
	public int hashCode(){
		return Objects.hash(name, columnName, nullable, fieldGeneratorType, defaultValue);
	}

	@Override
	public boolean equals(Object obj){
		if(!(obj instanceof BaseFieldKey)){
			return false;
		}
		BaseFieldKey<?> otherKey = (BaseFieldKey<?>)obj;
		return Objects.equals(name, otherKey.name)
				&& Objects.equals(columnName, otherKey.columnName)
				&& Objects.equals(nullable, otherKey.nullable)
				&& Objects.equals(fieldGeneratorType, otherKey.fieldGeneratorType)
				&& Objects.equals(defaultValue, otherKey.defaultValue);
	}

}