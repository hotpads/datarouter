package com.hotpads.datarouter.storage.field.generation;

import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import com.hotpads.datarouter.exception.DataAccessException;
import com.hotpads.datarouter.serialize.fieldcache.DatabeanFieldInfo;
import com.hotpads.datarouter.storage.databean.Databean;
import com.hotpads.datarouter.storage.field.Field;
import com.hotpads.datarouter.storage.key.primary.PrimaryKey;
import com.hotpads.util.core.java.ReflectionTool;

public class FieldGeneratorTool{

	private static final int MAX_RANDOM_ID_GENERATION_ATTEMPTS = 10;

	public static <PK extends PrimaryKey<PK>,D extends Databean<PK,D>> void generateAndSetValueForFieldIfNecessary(
			DatabeanFieldInfo<PK,D,?> fieldInfo, D databean){
		optFieldToGenerate(fieldInfo, databean)
				.ifPresent(field -> generateAndSetValueForField(fieldInfo, databean, field, bean -> true));
	}

	public static <PK extends PrimaryKey<PK>,D extends Databean<PK,D>> void generateAndSetValueForField(
		DatabeanFieldInfo<PK,D,?> fieldInfo, D databean, Field<?> field, Predicate<D> valueChecker){
		int attempts = 0;
		while(attempts++ < MAX_RANDOM_ID_GENERATION_ATTEMPTS){
			setAutoGeneratedId(fieldInfo, databean, field.getKey().generateRandomValue());
			if(valueChecker.test(databean)){
				return;
			}
		}
		throw new DataAccessException("error generating random id for " + fieldInfo.getTableName());
	}

	public static void setAutoGeneratedId(DatabeanFieldInfo<?,?,?> fieldInfo, Databean<?,?> databean, Object id){
		String autoGeneratedFieldName = fieldInfo.getAutogeneratedFieldName();
		Class<?> primaryKeyClass = fieldInfo.getPrimaryKeyClass();
		java.lang.reflect.Field autogeneratedField = ReflectionTool.getCachedDeclaredFieldFromHierarchy(
				primaryKeyClass, autoGeneratedFieldName);
		ReflectionTool.set(autogeneratedField, databean.getKey(), id);
	}

	public static Optional<Field<?>> optFieldToGenerate(DatabeanFieldInfo<?,?,?> fieldInfo, Databean<?,?> databean){
		if(fieldInfo.getAutoGeneratedType().isGenerated()){
			Optional<Field<?>> generatedField = findGeneratedField(databean);
			if(generatedField.isPresent() && generatedField.get().getValue() == null){
				return generatedField;
			}
		}
		return Optional.empty();
	}

	private static Optional<Field<?>> findGeneratedField(Databean<?,?> databean){
		List<Field<?>> fields = databean.getKeyFields();
		for(Field<?> field : fields){
			if(field.getKey().getAutoGeneratedType().isGenerated()){
				return Optional.of(field);
			}
		}
		return Optional.empty();
	}

}
