/*
 * Copyright Â© 2009 HotPads (admin@hotpads.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.datarouter.client.mysql.test.test.client.insert.generated;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.Guice;
import org.testng.annotations.Test;

import io.datarouter.client.mysql.DatarouterMysqlTestNgModuleFactory;
import io.datarouter.client.mysql.test.client.insert.generated.PutOpGeneratedTestBean;
import io.datarouter.client.mysql.test.client.insert.generated.PutOpGeneratedTestBeanKey;
import io.datarouter.client.mysql.test.client.insert.generated.managed.PutOpIdGeneratedManagedTestBean;
import io.datarouter.client.mysql.test.client.insert.generated.random.PutOpIdGeneratedRandomTestBean;
import io.datarouter.storage.Datarouter;
import jakarta.inject.Inject;

@Guice(moduleFactory = DatarouterMysqlTestNgModuleFactory.class)
public class AutoGeneratedIdIntegrationTests{

	private static final int A_LOT = 1000;
	private static final int BATCH = 100;
	private static final int THREADS = 20;

	@Inject
	private Datarouter datarouter;
	@Inject
	private PutOpIdGeneratedManagedTestDao daoWithManagedId;
	@Inject
	private DataroutrPutOpIdGeneratedRandomTestDao daoWithRandomId;

	@AfterClass
	public void after(){
		cleanup();
		datarouter.shutdown();
	}

	private void cleanup(){
		daoWithManagedId.deleteAll();
		daoWithRandomId.deleteAll();
	}

	@Test
	public void testThreadedInsert() throws Exception{
		testThreadedInsertOne();
		cleanup();
		testThreadedInsertMulti();
	}

	@Test(enabled = false) //called from parent test method to avoid parallelism
	public void testThreadedInsertOne() throws Exception{
		threadedInsert(1, daoWithManagedId, PutOpIdGeneratedManagedTestBean.class);
		threadedInsert(1, daoWithRandomId, PutOpIdGeneratedRandomTestBean.class);
	}

	@Test(enabled = false) //called from parent test method to avoid parallelism
	public void testThreadedInsertMulti() throws Exception{
		threadedInsert(BATCH, daoWithManagedId, PutOpIdGeneratedManagedTestBean.class);
		threadedInsert(BATCH, daoWithRandomId, PutOpIdGeneratedRandomTestBean.class);
	}

	private <PK extends PutOpGeneratedTestBeanKey<PK>,D extends PutOpGeneratedTestBean<PK,D>>
	void threadedInsert(int batchSize, PutOpIdGeneratedTest<PK,D> node, Class<D> databeanClass)
	throws Exception{
		var service = new ThreadPoolExecutor(
				THREADS,
				THREADS,
				0L,
				TimeUnit.MILLISECONDS,
				new ArrayBlockingQueue<>(2000),
				new ThreadPoolExecutor.CallerRunsPolicy());
		long beforeCount = node.scanKeys().count();
		List<Future<Void>> futures = new ArrayList<>();
		for(int i = 0; i < A_LOT; i += batchSize){
			futures.add(service.submit(() -> {
				if(batchSize == 1){
					insertOne(node, databeanClass);
				}else{
					insertMulti(node, databeanClass, batchSize);
				}
				return null;
			}));
		}
		service.shutdown();
		service.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
		Assert.assertEquals(beforeCount + A_LOT, node.scanKeys().count());
		int exceptions = 0;
		for(Future<Void> future : futures){
			try{
				future.get();
			}catch(ExecutionException e){
				exceptions++;
			}
		}
		Assert.assertEquals(0, exceptions);
	}

	private <PK extends PutOpGeneratedTestBeanKey<PK>, D extends PutOpGeneratedTestBean<PK,D>>
	void insertOne(PutOpIdGeneratedTest<PK,D> node, Class<D> databeanClass)
	throws Exception{
		D bean = getNewBean(databeanClass);
		Assert.assertNull(bean.getKey().getId());

		node.put(bean);
		Assert.assertNotNull(bean.getKey().getId());
	}

	private <PK extends PutOpGeneratedTestBeanKey<PK>, D extends PutOpGeneratedTestBean<PK,D>>
	void insertMulti(PutOpIdGeneratedTest<PK,D> node, Class<D> databeanClass, int batchSize)
	throws Exception{
		List<D> beans = new ArrayList<>();
		for(int i = 0; i < batchSize; i++){
			beans.add(getNewBean(databeanClass));
		}
		node.putMulti(beans);
		for(D bean : beans){
			Assert.assertNotNull(bean.getKey().getId());
		}
	}

	private <PK extends PutOpGeneratedTestBeanKey<PK>, D extends PutOpGeneratedTestBean<PK,D>>
	D getNewBean(Class<D> databeanClass)
	throws Exception{
		return databeanClass.getConstructor(String.class).newInstance(UUID.randomUUID().toString().substring(0, 10));
	}

}
