package com.hotpads.datarouter.client.imp.jdbc.field.positive;

import java.math.BigInteger;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import com.hotpads.datarouter.client.imp.jdbc.ddl.domain.MySqlColumnType;
import com.hotpads.datarouter.client.imp.jdbc.ddl.domain.SqlColumn;
import com.hotpads.datarouter.client.imp.jdbc.field.base.BasePrimitiveJdbcFieldCodec;
import com.hotpads.datarouter.exception.DataAccessException;
import com.hotpads.datarouter.storage.field.encoding.AutoGeneratedField.AutoGeneratedType;
import com.hotpads.datarouter.storage.field.imp.positive.UInt63Field;

public class UInt63JdbcFieldCodec
extends BasePrimitiveJdbcFieldCodec<Long,UInt63Field>{
	
	public UInt63JdbcFieldCodec(UInt63Field field){
		super(field);
	}

	@Override
	public Class<UInt63Field> getFieldType(){
		return UInt63Field.class;
	}


	
	@Override
	public SqlColumn getSqlColumnDefinition(){
		return new SqlColumn(field.getColumnName(), MySqlColumnType.BIGINT, 20, field.getNullable(),
				AutoGeneratedType.MANAGED.equals(field.getAutoGeneratedType()));
	}
	
	@Override
	public void setPreparedStatementValue(PreparedStatement ps, int parameterIndex){
		try{
			if(field.getValue()==null){
				ps.setNull(parameterIndex, Types.BIGINT);
			}else{
				ps.setLong(parameterIndex, field.getValue());
			}
		}catch(SQLException e){
			throw new DataAccessException(e);
		}
	}
	
	@Override
	public Long parseJdbcValueButDoNotSet(Object obj){
		return obj==null?null:((BigInteger)obj).longValue();
	}
	
	@Override
	public Long fromJdbcResultSetButDoNotSet(ResultSet rs){
		try{
			long value = rs.getLong(field.getColumnName());
			return rs.wasNull()?null:value;
		}catch(SQLException e){
			throw new DataAccessException(e);
		}
	}
	
}
