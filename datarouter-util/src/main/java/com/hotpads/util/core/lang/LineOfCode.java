package com.hotpads.util.core.lang;

import org.junit.Assert;
import org.junit.Test;

import com.hotpads.datarouter.util.core.DrComparableTool;

public class LineOfCode implements Comparable<LineOfCode>{

	private static final int OFFSET_FROM_TOP_OF_STACK = 1;//top of stack is our constructor


	/**************** fields *********************************/

	private String packageName;
	private String className;
	private String methodName;
	private Integer lineNumber;


	/****************** construct ***************************/

	public LineOfCode(){
		this(1);//add one for the chained constructor
	}

	public LineOfCode(int additionalOffsetFromTop){
		StackTraceElement[] stackTrace = new Exception().getStackTrace();
		StackTraceElement callsite = stackTrace[OFFSET_FROM_TOP_OF_STACK + additionalOffsetFromTop];
		this.packageName = StackTraceElementTool.getPackageName(callsite);
		this.className = StackTraceElementTool.getSimpleClassName(callsite);
		this.methodName = callsite.getMethodName();
		this.lineNumber = callsite.getLineNumber();
	}


	/******************** methods ***************************/

	public String getPersistentString(){
		return packageName + "." + className + ":" + methodName + ":" + lineNumber;
	}

	/***************** Object methods *********************/

	@Override
	public String toString(){
		return getPersistentString();
	}


	//generated by eclipse
	@Override
	public int hashCode(){
		final int prime = 31;
		int result = 1;
		result = prime * result + (className == null ? 0 : className.hashCode());
		result = prime * result + (lineNumber == null ? 0 : lineNumber.hashCode());
		result = prime * result + (methodName == null ? 0 : methodName.hashCode());
		result = prime * result + (packageName == null ? 0 : packageName.hashCode());
		return result;
	}


	//generated by eclipse
	@Override
	public boolean equals(Object obj){
		if(this == obj){
			return true;
		}
		if(obj == null){
			return false;
		}
		if(getClass() != obj.getClass()){
			return false;
		}
		LineOfCode other = (LineOfCode) obj;
		if(className == null){
			if(other.className != null){
				return false;
			}
		}else if(!className.equals(other.className)){
			return false;
		}
		if(lineNumber == null){
			if(other.lineNumber != null){
				return false;
			}
		}else if(!lineNumber.equals(other.lineNumber)){
			return false;
		}
		if(methodName == null){
			if(other.methodName != null){
				return false;
			}
		}else if(!methodName.equals(other.methodName)){
			return false;
		}
		if(packageName == null){
			if(other.packageName != null){
				return false;
			}
		}else if(!packageName.equals(other.packageName)){
			return false;
		}
		return true;
	}

	/**************** Comparable **************************/

	@Override
	public int compareTo(LineOfCode that){
		if(that == null){
			return 1;
		}// null first
		int diff = DrComparableTool.nullFirstCompareTo(this.packageName, that.packageName);
		if(diff != 0){
			return diff;
		}
		diff = DrComparableTool.nullFirstCompareTo(this.className, that.className);
		if(diff != 0){
			return diff;
		}
		diff = DrComparableTool.nullFirstCompareTo(this.methodName, that.methodName);
		if(diff != 0){
			return diff;
		}
		return DrComparableTool.nullFirstCompareTo(this.lineNumber, that.lineNumber);
	}


	/***************** get/set ****************************/

	public String getPackageName(){
		return packageName;
	}

	public String getClassName(){
		return className;
	}

	public String getMethodName(){
		return methodName;
	}

	public Integer getLineNumber(){
		return lineNumber;
	}


	/******************** tests ******************************/

	/*
	 * these can break easily if you modify this class.  just update the test
	 */
	public static class LineOfCodeTests{
		@Test
		public void testSimple(){
			LineOfCode lineOfCode = new LineOfCode();
			Assert.assertEquals("com.hotpads.util.core.lang", lineOfCode.getPackageName());
			Assert.assertEquals("LineOfCode$LineOfCodeTests", lineOfCode.getClassName());
			Assert.assertEquals("testSimple", lineOfCode.getMethodName());
			Assert.assertEquals(new Integer(152), lineOfCode.getLineNumber());
		}

		@Test
		public void testCompareTo(){
			LineOfCode first = new LineOfCode();
			LineOfCode second = new LineOfCode();
			int diff = first.compareTo(second);
			Assert.assertEquals(-1, diff);
		}
	}
}
