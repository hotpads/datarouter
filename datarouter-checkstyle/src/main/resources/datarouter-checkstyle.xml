<?xml version="1.0"?>
<!--

    Copyright Â© 2009 HotPads (admin@hotpads.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
	<property name="charset" value="UTF-8"/>
	<property name="severity" value="warning"/>
	<property name="tabWidth" value="4"/>
	<module name="FileTabCharacter">
		<property name="eachLine" value="false"/>
		<property name="fileExtensions" value="{}"/>
	</module>
	<module name="SuppressWarningsFilter" />
	<module name="LineLength">
		<property name="max" value="120"/>
		<property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
		<property name="fileExtensions" value="java" />
	</module>
	<module name="SuppressWithPlainTextCommentFilter"/>
	<module name="TreeWalker">
		<module name="SuppressWarningsHolder" />
		<module name="SuppressionCommentFilter" />
		<module name="OuterTypeFilename"/>
		<module name="IllegalTokenText">
			<property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
			<property name="format" value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
			<property name="message" value="Avoid using corresponding octal or Unicode escape."/>
		</module>
		<module name="AvoidEscapedUnicodeCharacters">
			<property name="allowEscapesForControlCharacters" value="true"/>
			<property name="allowByTailComment" value="true"/>
			<property name="allowNonPrintableEscapes" value="true"/>
		</module>
		<module name="AvoidStarImport"/>
		<module name="OneTopLevelClass"/>
		<module name="NoLineWrap"/>
		<module name="EmptyBlock">
			<property name="option" value="TEXT"/>
			<property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
		</module>
		<module name="NeedBraces">
			<property name="allowEmptyLoopBody" value="true"/>
		</module>
		<module name="LeftCurly">
		</module>
		<module name="RightCurly">
			<property name="option" value="same"/>
			<property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
		</module>
		<module name="RightCurly">
			<property name="option" value="alone"/>
			<property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
		</module>

		<module name="OneStatementPerLine"/>
		<module name="ArrayTypeStyle"/>
		<module name="UpperEll"/>
		<module name="ModifierOrder"/>
		<module name="SeparatorWrap">
			<property name="tokens" value="DOT"/>
			<property name="option" value="nl"/>
		</module>
		<module name="SeparatorWrap">
			<property name="tokens" value="COMMA"/>
			<property name="option" value="EOL"/>
		</module>
		<module name="PackageName">
			<property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
			<message key="name.invalidPattern"
					 value="Package name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="TypeName">
			<message key="name.invalidPattern"
					 value="Type name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="MemberName">
			<property name="format" value="^[a-z][a-zA-Z0-9]+$"/>
			<message key="name.invalidPattern"
					 value="Member name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="ParameterName">
			<property name="format" value="^[a-z][a-zA-Z0-9]+$"/>
			<message key="name.invalidPattern"
					 value="Parameter name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="LocalVariableName">
			<property name="tokens" value="VARIABLE_DEF"/>
			<property name="format" value="^[a-z][a-zA-Z0-9]+$"/>
			<property name="allowOneCharVarInForLoop" value="true"/>
			<message key="name.invalidPattern"
					 value="Local variable name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="ClassTypeParameterName">
			<property name="format" value="(^[A-Z]{1,2}[0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
			<message key="name.invalidPattern"
					 value="Class type name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="MethodTypeParameterName">
			<property name="format" value="(^[A-Z]{1,2}[0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
			<message key="name.invalidPattern"
					 value="Method type name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="NoFinalizer"/>
		<module name="AbbreviationAsWordInName">
			<property name="ignoreFinal" value="false"/>
			<property name="allowedAbbreviationLength" value="1"/>
		</module>
		<module name="OverloadMethodsDeclarationOrder"/>

		<module name="MethodParamPad"/>
		<module name="OperatorWrap">
			<property name="option" value="NL"/>
			<property name="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>
		</module>
		<module name="AnnotationLocation">
			<property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
		</module>
		<module name="AnnotationLocation">
			<property name="tokens" value="VARIABLE_DEF"/>
			<property name="allowSamelineMultipleAnnotations" value="true"/>
		</module>
		<module name="NonEmptyAtclauseDescription"/>
		<module name="MethodName">
			<property name="format" value="^[a-z][a-zA-Z0-9_]+$"/>
			<message key="name.invalidPattern"
					 value="Method name ''{0}'' must match pattern ''{1}''."/>
		</module>
		<module name="EqualsAvoidNull"/>
		<module name="EqualsHashCode"/>
		<module name="CovariantEquals"/>
		<module name="SimplifyBooleanExpression"/>
		<module name="SimplifyBooleanReturn"/>
		<module name="StringLiteralEquality"/>
		<module name="UnnecessaryParentheses"/>
		<module name="UpperEll"/>
		<module name="UnusedImports"/>
		<module name="Regexp">
			<property name="format" value="System\.(out)|(err)\.print"/>
			<property name="illegalPattern" value="true"/>
			<property name="ignoreComments" value="true"/>
			<property name="message" value="Console print"/>
		</module>
		<module name="Regexp">
			<property name="format" value="[ \t]+$"/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="Trailing whitespace"/>
		</module>
		<module name="Regexp">
			<property name="format" value="\.printStackTrace\("/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="Stack trace print"/>
		</module>
		<module name="Regexp">
			<property name="format" value="[\r\n]{4,}"/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="Too many blank lines"/>
		</module>
		<module name="Regexp">
			<property name="format" value="super\(\)"/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="Explicit no arg super constructor call"/>
		</module>
		<module name="Regexp">
			<property name="format" value="com\.google\.inject\.Singleton\;|com\.google\.inject\.Inject\;|org\.springframework\.beans\.factory\.annotation\.Autowired\;"/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="Non javax.inject annotation"/>
		</module>
		<module name="Regexp">
			<property name="format" value="import .*shaded.*"/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="No shaded imports"/>
		</module>
		<module name="Regexp">
			<property name="format" value="import org.threeten.bp.*|import org.joda.*|import com.google.common.collect.Lists;|import com.google.common.collect.Sets;"/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="Non jdk import"/>
		</module>
		<module name="Regexp">
			<property name="format" value="import java.util.Calendar.*"/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="Prefer classes in java.time"/>
			<property name="severity" value="error"/>
		</module>
		<module name="Regexp">
			<property name="format" value="import java.util.TimeZone.*"/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="Prefer java.time.ZoneId"/>
			<property name="severity" value="info"/>
		</module>
		<module name="Regexp">
			<property name="format" value="import java.text.SimpleDateFormat.*"/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="Prefer java.time.format.DateTimeFormatter"/>
			<property name="severity" value="info"/>
		</module>
		<module name="Regexp">
			<property name="format" value="(?:(?&lt;!\t)(?&lt;!=)(?&lt;!->))[ \t]\{$"/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="Whitespace before {"/>
		</module>
		<module name="Regexp">
			<property name="format" value="\}[ \t]+(catch|while|else)"/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="Whitespace after }"/>
		</module>
		<module name="Regexp">
			<property name="format" value="(if|for|while|catch)[ \t]+\("/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="Whitespace before ("/>
		</module>
		<module name="Regexp">
			<property name="format" value="\([ \t][^!]"/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="Whitespace after ("/>
		</module>
		<module name="Regexp">
			<property name="format" value="[ \t]\)"/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="Whitespace before )"/>
		</module>
		<module name="Regexp">
			<property name="format" value="\?.* \:\n"/>
			<property name="illegalPattern" value="true"/>
			<property name="message" value="Line break before ':' in a ternary expression"/>
		</module>
		<module name="WhitespaceAround">
			<property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAMBDA, LAND, LE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, SL, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN"/>
			<property name="ignoreEnhancedForColon" value="false" />
		</module>
		<module name="NoWhitespaceAfter"/>
		<module name="NoWhitespaceBefore">
			<property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT"/>
			<property name="allowLineBreaks" value="true"/>
		</module>
		<module name="ParenPad"/>
		<module name="SingleSpaceSeparator"/>
		<module name="TypecastParenPad"/>
		<module name="AvoidStaticImport">
			<property name="excludes" value="org.mockito.Mockito.*,org.mockito.ArgumentMatchers.*,j2html.TagCreator.*"/>
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="^\t* "/>
			<property name="message" value="Indent must use tab characters"/>
			<property name="ignoreComments" value="true"/>
		</module>
	</module>
</module>
