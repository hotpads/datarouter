package com.hotpads.datarouter.test.node.basic.manyfield.test;

import java.io.IOException;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import com.hotpads.datarouter.client.ClientType;
import com.hotpads.datarouter.test.DRTestConstants;
import com.hotpads.datarouter.test.node.basic.BasicNodeTestRouter;
import com.hotpads.datarouter.test.node.basic.BasicNodeTestRouter.SortedBasicNodeTestRouter;
import com.hotpads.datarouter.test.node.basic.manyfield.ManyFieldTypeBean;
import com.hotpads.datarouter.test.node.basic.manyfield.ManyFieldTypeBeanKey;
import com.hotpads.util.core.CollectionTool;
import com.hotpads.util.core.MapTool;

@RunWith(Parameterized.class)
public class AutoGeneratedKeyIntegrationTests {
	static Logger logger = Logger.getLogger(AutoGeneratedKeyIntegrationTests.class);
	
	/****************************** static ***********************************/

	static Map<ClientType,BasicNodeTestRouter> routerByClientType = MapTool.create();
	static Map<ClientType,List<ManyFieldTypeBeanKey>> keysByClientType = MapTool.create();

	
	@Parameters
	public static Collection<Object[]> parameters(){
		return DRTestConstants.CLIENT_TYPE_OBJECT_ARRAYS;
	}
	
	@BeforeClass
	public static void init() throws IOException{	
		

	}
	
	/***************************** fields **************************************/
	
	protected ClientType clientType;
	protected BasicNodeTestRouter router;

	/***************************** constructors **************************************/
	
	public AutoGeneratedKeyIntegrationTests(ClientType clientType){
		this.clientType = clientType;
		this.router = new SortedBasicNodeTestRouter(DRTestConstants.CLIENT_drTestHibernate0, AutoGeneratedKeyIntegrationTests.class);
	}

	/***************************** tests **************************************/

	@Test
	public void testNullKey(){
		if (!isHibernate()){
			return;
		}
		ManyFieldTypeBean bean = new ManyFieldTypeBean();
		System.out.println("key : " + bean.getKey().getId());
		router.manyFieldTypeBean().put(bean, null);
		System.out.println("key after : " + bean.getKey().getId());
		Assert.assertNotNull(bean.getKey().getId());
		keysByClientType.get(clientType).add(bean.getKey());
	}
	
	@Test
	public void testBoolean(){
		ManyFieldTypeBean bean = new ManyFieldTypeBean();
		
		//test true value
		bean.setBooleanField(true);
		router.manyFieldTypeBean().put(bean, null);
		ManyFieldTypeBean roundTripped = router.manyFieldTypeBean().get(bean.getKey(), null);
		if(isMemory()){
			Assert.assertSame(bean, roundTripped);
		}else{
			Assert.assertNotSame(bean, roundTripped);
		}
		Assert.assertEquals(bean.getBooleanField(), roundTripped.getBooleanField());

		//test false value
		bean.setBooleanField(false);
		router.manyFieldTypeBean().put(bean, null);
		ManyFieldTypeBean roundTrippedFalse = router.manyFieldTypeBean().get(bean.getKey(), null);
		if(isMemory()){
			Assert.assertSame(bean, roundTripped);
		}else{
			Assert.assertNotSame(bean, roundTripped);
		}
		Assert.assertEquals(bean.getBooleanField(), roundTrippedFalse.getBooleanField());
		
		recordKey(bean.getKey());
	}
	
	
	/************************** tests for unmarshalling into databeans (a little out of place here **************/
	
	@Test 
	public void testGetAll(){
		if(!isMemcached()){
			List<ManyFieldTypeBean> allBeans = router.manyFieldTypeBean().getAll(null);
			Assert.assertTrue(CollectionTool.sameSize(keysByClientType.get(clientType), allBeans));
		}
	}
	
	@Test
	public void testGetMulti(){
		List<ManyFieldTypeBean> allBeans = router.manyFieldTypeBean().getMulti(keysByClientType.get(clientType), null);
		Assert.assertTrue(CollectionTool.sameSize(keysByClientType.get(clientType), allBeans));
	}
	
	
	/************************* helpers ********************************************/
	
	protected void recordKey(ManyFieldTypeBeanKey key){
		keysByClientType.get(clientType).add(key);
	}
	
	public boolean isMemory(){
		return ClientType.memory == clientType;
	}

	public boolean isHibernate(){
		return ClientType.hibernate == clientType;
	}

	public boolean isHBase(){
		return ClientType.hbase == clientType;
	}

	public boolean isMemcached(){
		return ClientType.memcached == clientType;
	}
}
