package com.hotpads.datarouter.test.node.basic.manyfield;

import java.util.List;
import java.util.Map;

import javax.persistence.Entity;
import javax.persistence.Id;

import org.hibernate.annotations.AccessType;

import com.hotpads.datarouter.client.imp.jdbc.ddl.domain.MySqlColumnType;
import com.hotpads.datarouter.serialize.fielder.BaseDatabeanFielder;
import com.hotpads.datarouter.storage.databean.BaseDatabean;
import com.hotpads.datarouter.storage.field.Field;
import com.hotpads.datarouter.storage.field.imp.StringField;
import com.hotpads.datarouter.storage.field.imp.comparable.BooleanField;
import com.hotpads.util.core.ListTool;
import com.hotpads.util.core.MapTool;


@SuppressWarnings("serial")
@Entity()
@AccessType("field")
public class AutoGeneratedKeyBean extends BaseDatabean<ManyFieldTypeBeanKey,AutoGeneratedKeyBean>{
	
	public static final int DEFAULT_STRING_LENGTH = MySqlColumnType.MAX_LENGTH_VARCHAR;

	/***************************** fields ********************************/
	
	@Id
	private ManyFieldTypeBeanKey key;
	
	private Boolean booleanField;
	
	private String testSchemaUpdateField;
	
	
	public static class F{
		public static final String
			KEY_NAME = "key",
			booleanField = "booleanField",
			testSchemaUpdateField = "testSchemaUpdateField";
	}
	
	
	@Override
	public List<Field<?>> getNonKeyFields(){
		List<Field<?>> fields = ListTool.createLinkedList();
		fields.add(new BooleanField(F.booleanField, booleanField));
		fields.add(new StringField(F.testSchemaUpdateField, testSchemaUpdateField, DEFAULT_STRING_LENGTH));
		return fields;
	}
	
	public static class AutoGeneratedKeyBeanFielder extends BaseDatabeanFielder<ManyFieldTypeBeanKey,AutoGeneratedKeyBean>{
		public AutoGeneratedKeyBeanFielder(){}
		@Override
		public Class<ManyFieldTypeBeanKey> getKeyFielderClass(){
			return ManyFieldTypeBeanKey.class;
		}
		@Override
		public List<Field<?>> getNonKeyFields(AutoGeneratedKeyBean d){
			return d.getNonKeyFields();
		}
		@Override
		public Map<String,List<Field<?>>> getIndexes(AutoGeneratedKeyBean d){
			Map<String,List<Field<?>>> indexesByName = MapTool.createTreeMap();
			return indexesByName;
		}
	}

	
	/***************************** constructor **************************************/
		
	public AutoGeneratedKeyBean(){//no-arg and public
//		this.key = new ManyFieldTypeBeanKey();
	}
	
	
	/************************* databean *********************************************/
	
	@Override
	public Class<ManyFieldTypeBeanKey> getKeyClass() {
		return ManyFieldTypeBeanKey.class;
	};
	
	@Override
	public ManyFieldTypeBeanKey getKey(){
		return key;
	}
	
	@Override
	public boolean isFieldAware(){
		return true;
	}
	
	/***************************** get/set **************************************/
	
	public void setKey(ManyFieldTypeBeanKey key){
		this.key = key;
	}

	public Long getId(){
		return key.getId();
	}

	public void setId(Long id){
		key.setId(id);
	}

	public Boolean getBooleanField(){
		return booleanField;
	}


	public void setBooleanField(Boolean booleanField){
		this.booleanField = booleanField;
	}
	
}
