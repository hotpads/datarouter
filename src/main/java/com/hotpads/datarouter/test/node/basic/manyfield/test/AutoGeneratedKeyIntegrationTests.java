package com.hotpads.datarouter.test.node.basic.manyfield.test;

import java.io.IOException;
import java.util.Collection;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import com.hotpads.datarouter.client.ClientType;
import com.hotpads.datarouter.client.imp.hibernate.HibernateClientType;
import com.hotpads.datarouter.test.DRTestConstants;
import com.hotpads.datarouter.test.node.basic.BasicNodeTestRouter;
import com.hotpads.datarouter.test.node.basic.BasicNodeTestRouter.SortedBasicNodeTestRouter;
import com.hotpads.datarouter.test.node.basic.manyfield.AutoGeneratedKeyBean;
import com.hotpads.datarouter.test.node.basic.manyfield.AutoGeneratedKeyBeanKey;
import com.hotpads.util.core.CollectionTool;
import com.hotpads.util.core.IterableTool;
import com.hotpads.util.core.ListTool;

@RunWith(Parameterized.class)
public class AutoGeneratedKeyIntegrationTests {
	static Logger logger = LoggerFactory.getLogger(AutoGeneratedKeyIntegrationTests.class);
	
	/****************************** static ***********************************/

	@Parameters
	public static Collection<Object[]> parameters(){
		return ListTool.wrap(new Object[]{HibernateClientType.INSTANCE});
	}
	
	@BeforeClass
	public static void init() throws IOException{	

	}
	
	/***************************** fields **************************************/
	
	protected ClientType clientType;
	protected BasicNodeTestRouter router;
	protected List<AutoGeneratedKeyBeanKey> keys;

	/***************************** constructors **************************************/

	public AutoGeneratedKeyIntegrationTests(ClientType clientType){
		this.clientType = clientType;
		this.router = new SortedBasicNodeTestRouter(DRTestConstants.CLIENT_drTestHibernate0,
				AutoGeneratedKeyIntegrationTests.class, true, false);
		this.keys = ListTool.create();
		router.autoGeneratedKeyBean().deleteAll(null);
		Assert.assertEquals(0, IterableTool.count(router.autoGeneratedKeyBean().scan(null, null)).intValue());
	}

	/***************************** tests **************************************/

	@Test
	public void testNullKey(){
		AutoGeneratedKeyBean bean = new AutoGeneratedKeyBean();
		Assert.assertNull(bean.getKey().getId());
		router.autoGeneratedKeyBean().put(bean, null);
		Assert.assertNotNull(bean.getKey().getId());
		recordKey(bean.getKey());
	}
	
	@Test
	public void testPutMulti(){
		AutoGeneratedKeyBean bean1 = new AutoGeneratedKeyBean();
		AutoGeneratedKeyBean bean2 = new AutoGeneratedKeyBean();
		AutoGeneratedKeyBean bean3 = new AutoGeneratedKeyBean();
		Assert.assertNull(bean1.getKey().getId());
		Assert.assertNull(bean2.getKey().getId());
		Assert.assertNull(bean3.getKey().getId());
		
		List<AutoGeneratedKeyBean> databeans = ListTool.create();
		databeans.add(bean1);
		databeans.add(bean2);
		databeans.add(bean3);
		router.autoGeneratedKeyBean().putMulti(databeans, null);
		
		Assert.assertNotNull(bean1.getKey().getId());
		Assert.assertNotNull(bean2.getKey().getId());
		Assert.assertNotNull(bean3.getKey().getId());
		Assert.assertNotSame(bean1.getKey().getId(), bean2.getKey().getId());
		Assert.assertNotSame(bean3.getKey().getId(), bean2.getKey().getId());
		Assert.assertNotSame(bean1.getKey().getId(), bean3.getKey().getId());
		
		recordKey(bean1.getKey());
		recordKey(bean2.getKey());
		recordKey(bean3.getKey());
	}
	
	@Test
	public void testPutMultiWithIds() {
		AutoGeneratedKeyBean bean1 = new AutoGeneratedKeyBean();
		AutoGeneratedKeyBean bean2 = new AutoGeneratedKeyBean();
		AutoGeneratedKeyBean bean3 = new AutoGeneratedKeyBean();
		Assert.assertNull(bean1.getKey().getId());
		Assert.assertNull(bean2.getKey().getId());
		Assert.assertNull(bean3.getKey().getId());

		router.autoGeneratedKeyBean().put(bean1, null);
		Assert.assertNotNull(bean1.getKey().getId());
		recordKey(bean1.getKey());
		System.out.println("1 " + bean1.getId());
		
		bean1.setStringField("springField");

		List<AutoGeneratedKeyBean> databeans = ListTool.create();
		databeans.add(bean1);
		databeans.add(bean2);
		databeans.add(bean3);
		router.autoGeneratedKeyBean().putMulti(databeans, null);
		
		recordKey(bean2.getKey());
		recordKey(bean3.getKey());

		System.out.println("1 " + bean1.getId());
		System.out.println("1 string " + bean1.getStringField());
		System.out.println("2 " + bean2.getId());
		System.out.println("3 " + bean3.getId());
		
		Assert.assertNotNull(bean1.getKey().getId());
		Assert.assertNotNull(bean2.getKey().getId());
		Assert.assertNotNull(bean3.getKey().getId());
		Assert.assertNotSame(bean1.getKey().getId(), bean2.getKey().getId());
		Assert.assertNotSame(bean3.getKey().getId(), bean2.getKey().getId());
		Assert.assertNotSame(bean1.getKey().getId(), bean3.getKey().getId());
	}
	
	@Test
	public void testIndividualPut() {
		AutoGeneratedKeyBean bean1 = new AutoGeneratedKeyBean();
		AutoGeneratedKeyBean bean2 = new AutoGeneratedKeyBean();
		AutoGeneratedKeyBean bean3 = new AutoGeneratedKeyBean();
		Assert.assertNull(bean1.getKey().getId());
		Assert.assertNull(bean2.getKey().getId());
		Assert.assertNull(bean3.getKey().getId());

		router.autoGeneratedKeyBean().put(bean1, null);
		router.autoGeneratedKeyBean().put(bean2, null);
		router.autoGeneratedKeyBean().put(bean3, null);
		
		Assert.assertNotNull(bean1.getKey().getId());
		Assert.assertNotNull(bean2.getKey().getId());
		Assert.assertNotNull(bean3.getKey().getId());
		Assert.assertNotSame(bean1.getKey().getId(), bean2.getKey().getId());
		Assert.assertNotSame(bean3.getKey().getId(), bean2.getKey().getId());
		Assert.assertNotSame(bean1.getKey().getId(), bean3.getKey().getId());
		
		recordKey(bean1.getKey());
		recordKey(bean2.getKey());
		recordKey(bean3.getKey());
	}
	
	@Test
	public void testBoolean(){
		AutoGeneratedKeyBean bean = new AutoGeneratedKeyBean();
		Assert.assertNull(bean.getKey().getId());
		
		//test true value
		bean.setBooleanField(true);
		router.autoGeneratedKeyBean().put(bean, null);
		AutoGeneratedKeyBean roundTripped = router.autoGeneratedKeyBean().get(bean.getKey(), null);
		Assert.assertNotSame(bean, roundTripped);
		Assert.assertEquals(bean.getBooleanField(), roundTripped.getBooleanField());

		//test false value
		bean.setBooleanField(false);
		router.autoGeneratedKeyBean().put(bean, null);
		AutoGeneratedKeyBean roundTrippedFalse = router.autoGeneratedKeyBean().get(bean.getKey(), null);
		Assert.assertNotSame(bean, roundTripped);
		Assert.assertEquals(bean.getBooleanField(), roundTrippedFalse.getBooleanField());
		
		recordKey(bean.getKey());
	}
	
	@Test
	public void testString() {
		AutoGeneratedKeyBean bean = new AutoGeneratedKeyBean();
		Assert.assertNull(bean.getKey().getId());

		router.autoGeneratedKeyBean().put(bean, null);
		Assert.assertNotNull(bean.getKey().getId());
		
		String stringToPut = "StringToPut";
		bean.setStringField(stringToPut);
		router.autoGeneratedKeyBean().put(bean, null);
		AutoGeneratedKeyBean roundTrip = router.autoGeneratedKeyBean().get(bean.getKey(), null);
		Assert.assertEquals(stringToPut, roundTrip.getStringField());

		recordKey(bean.getKey());
	}
	
	/************************** tests for unmarshalling into databeans (a little out of place here **************/
		
	@Test
	public void testGetMulti(){
		List<AutoGeneratedKeyBean> allBeans = router.autoGeneratedKeyBean().getMulti(keys, null);
		Assert.assertTrue(CollectionTool.sameSize(keys, allBeans));
	}
	
	
	/************************* helpers ********************************************/
	
	protected void recordKey(AutoGeneratedKeyBeanKey key){
		keys.add(key);
	}
}
