package com.hotpads.datarouter.test.node.basic.manyfield;

import java.util.List;
import java.util.Map;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

import org.hibernate.annotations.AccessType;

import com.hotpads.datarouter.client.imp.jdbc.ddl.domain.MySqlColumnType;
import com.hotpads.datarouter.serialize.fielder.BaseDatabeanFielder;
import com.hotpads.datarouter.storage.databean.BaseDatabean;
import com.hotpads.datarouter.storage.field.Field;
import com.hotpads.datarouter.storage.field.FieldTool;
import com.hotpads.datarouter.storage.field.imp.StringField;
import com.hotpads.datarouter.storage.field.imp.comparable.BooleanField;
import com.hotpads.util.core.MapTool;


@SuppressWarnings("serial")
@Entity()
@AccessType("field")
public class AutoGeneratedKeyBean extends BaseDatabean<AutoGeneratedKeyBeanKey,AutoGeneratedKeyBean>{
	
	public static final int DEFAULT_STRING_LENGTH = MySqlColumnType.MAX_LENGTH_VARCHAR;

	/***************************** fields ********************************/
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private AutoGeneratedKeyBeanKey key;
	
	private Boolean booleanField;
	private String stringField;
	
	public static class F{
		public static final String
			KEY_NAME = "key",
			booleanField = "booleanField",
			stringField = "stringField";
	}
	
	public static class AutoGeneratedKeyBeanFielder extends BaseDatabeanFielder<AutoGeneratedKeyBeanKey,AutoGeneratedKeyBean>{
		public AutoGeneratedKeyBeanFielder(){}
		@Override
		public Class<AutoGeneratedKeyBeanKey> getKeyFielderClass(){
			return AutoGeneratedKeyBeanKey.class;
		}
		@Override
		public List<Field<?>> getNonKeyFields(AutoGeneratedKeyBean d){
			return FieldTool.createList(
					new BooleanField(F.booleanField, d.booleanField),
					new StringField(F.stringField, d.stringField, DEFAULT_STRING_LENGTH));
		}
		@Override
		public Map<String,List<Field<?>>> getIndexes(AutoGeneratedKeyBean d){
			Map<String,List<Field<?>>> indexesByName = MapTool.createTreeMap();
			return indexesByName;
		}
	}

	
	/***************************** constructor **************************************/
		
	public AutoGeneratedKeyBean(){//no-arg and public
		this.key = new AutoGeneratedKeyBeanKey();
	}
	
	
	/************************* databean *********************************************/
	
	@Override
	public Class<AutoGeneratedKeyBeanKey> getKeyClass() {
		return AutoGeneratedKeyBeanKey.class;
	};
	
	@Override
	public AutoGeneratedKeyBeanKey getKey(){
		return key;
	}
	
	/***************************** get/set **************************************/
	
	public void setKey(AutoGeneratedKeyBeanKey key){
		this.key = key;
	}

	public Long getId(){
		return key.getId();
	}

	public void setId(Long id){
		key.setId(id);
	}

	public Boolean getBooleanField(){
		return booleanField;
	}


	public void setBooleanField(Boolean booleanField){
		this.booleanField = booleanField;
	}


	public String getStringField(){
		return stringField;
	}


	public void setStringField(String stringField){
		this.stringField = stringField;
	}
	
}
