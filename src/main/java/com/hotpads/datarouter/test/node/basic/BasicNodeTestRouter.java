package com.hotpads.datarouter.test.node.basic;

import java.util.List;
import java.util.Random;

import javax.inject.Inject;
import javax.inject.Singleton;

import com.hotpads.datarouter.backup.databean.BackupRecord;
import com.hotpads.datarouter.backup.databean.BackupRecord.BackupRecordFielder;
import com.hotpads.datarouter.backup.databean.BackupRecordKey;
import com.hotpads.datarouter.client.ClientId;
import com.hotpads.datarouter.node.Node;
import com.hotpads.datarouter.node.factory.NodeFactory;
import com.hotpads.datarouter.node.op.combo.SortedMapStorage;
import com.hotpads.datarouter.node.op.combo.SortedMapStorage.SortedMapStorageNode;
import com.hotpads.datarouter.node.op.raw.MapStorage.MapStorageNode;
import com.hotpads.datarouter.routing.BaseDatarouter;
import com.hotpads.datarouter.routing.DatarouterContext;
import com.hotpads.datarouter.test.DRTestConstants;
import com.hotpads.datarouter.test.node.basic.autogenkey.AutoGeneratedKeyBean;
import com.hotpads.datarouter.test.node.basic.autogenkey.AutoGeneratedKeyBeanKey;
import com.hotpads.datarouter.test.node.basic.autogenkey.AutoGeneratedKeyIntegrationTests;
import com.hotpads.datarouter.test.node.basic.autogenkey.AutoGeneratedKeyBean.AutoGeneratedKeyBeanFielder;
import com.hotpads.datarouter.test.node.basic.backup.BackupBean;
import com.hotpads.datarouter.test.node.basic.backup.BackupBean.BackupBeanFielder;
import com.hotpads.datarouter.test.node.basic.backup.BackupBeanKey;
import com.hotpads.datarouter.test.node.basic.backup.test.BackupIntegrationTester;
import com.hotpads.datarouter.test.node.basic.manyfield.ManyFieldTypeBean;
import com.hotpads.datarouter.test.node.basic.manyfield.ManyFieldTypeBean.ManyFieldTypeBeanFielder;
import com.hotpads.datarouter.test.node.basic.manyfield.ManyFieldTypeBeanKey;
import com.hotpads.datarouter.test.node.basic.manyfield.test.ManyFieldTypeIntegrationTests;
import com.hotpads.util.core.ListTool;

@Singleton
public class BasicNodeTestRouter extends BaseDatarouter{

	public static final String 
			name = "basicNodeTest",
			ENTITY_ManyFieldTypeBeanEntity = "ManyFieldTypeBeanEntity",
			NODE_PREFIX_ManyFieldTypeBean = "MFTB";

	
	@Inject
	public BasicNodeTestRouter(DatarouterContext drContext, NodeFactory nodeFactory, String clientName, 
			Class<?> testType, boolean useFielder, boolean entity){
		super(drContext, DRTestConstants.CONFIG_PATH, name);
		
		if(ManyFieldTypeIntegrationTests.class.equals(testType)){
			if(entity){
				manyFieldTypeBeanNode = register(nodeFactory.create(clientName, ManyFieldTypeBean.class, ManyFieldTypeBeanFielder.class, 
						new Random().nextInt(), this, false));
			}else{
				manyFieldTypeBeanNode = register(nodeFactory.create(clientName, ManyFieldTypeBean.class, ManyFieldTypeBeanFielder.class, 
						new Random().nextInt(), this, false));
			}
		}
		if(BackupIntegrationTester.class.equals(testType)){
			backupBeanNode = register(nodeFactory.create(clientName, BackupBean.class, BackupBeanFielder.class, this, false));
			backupRecordNode = register(nodeFactory.create(clientName, BackupRecord.class, BackupRecordFielder.class, this, false));
		}
		if(AutoGeneratedKeyIntegrationTests.class.equals(testType)){
			autoGeneratedKeyBeanNode = register(nodeFactory.create(clientName, AutoGeneratedKeyBean.class, AutoGeneratedKeyBeanFielder.class, this, false));
		}
		
		registerWithContext();//do after field inits
	}

	/********************************** config **********************************/

	public static final List<ClientId> CLIENT_IDS = ListTool.create(
			new ClientId(DRTestConstants.CLIENT_drTestJdbc0, true),
			new ClientId(DRTestConstants.CLIENT_drTestHibernate0, true),
			new ClientId(DRTestConstants.CLIENT_drTestHBase, true),
			new ClientId(DRTestConstants.CLIENT_drTestMemcached, true));
	
	@Override
	public List<ClientId> getClientIds(){
		return CLIENT_IDS;
	}


	
	/********************************** nodes **********************************/
	
	protected Node<ManyFieldTypeBeanKey,ManyFieldTypeBean> manyFieldTypeBeanNode;
	protected Node<BackupBeanKey,BackupBean> backupBeanNode;
	protected Node<BackupRecordKey,BackupRecord> backupRecordNode;
	protected Node<AutoGeneratedKeyBeanKey, AutoGeneratedKeyBean> autoGeneratedKeyBeanNode;

	
	/*************************** get/set ***********************************/

	public MapStorageNode<ManyFieldTypeBeanKey,ManyFieldTypeBean> manyFieldTypeBean() {
		return cast(manyFieldTypeBeanNode);
	}

	public SortedMapStorageNode<BackupBeanKey,BackupBean> backupBeanNode(){
		return cast(backupBeanNode);
	}

	public SortedMapStorageNode<BackupRecordKey,BackupRecord> backupRecordNode(){
		return cast(backupRecordNode);
	}
	
	public SortedMapStorage<AutoGeneratedKeyBeanKey,AutoGeneratedKeyBean> autoGeneratedKeyBean(){
		return cast(autoGeneratedKeyBeanNode);
	}

}





