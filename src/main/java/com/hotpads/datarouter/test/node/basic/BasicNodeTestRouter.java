package com.hotpads.datarouter.test.node.basic;
import java.util.List;
import java.util.Random;

import com.google.inject.Singleton;
import com.hotpads.datarouter.backup.databean.BackupRecord;
import com.hotpads.datarouter.backup.databean.BackupRecord.BackupRecordFielder;
import com.hotpads.datarouter.backup.databean.BackupRecordKey;
import com.hotpads.datarouter.client.ClientId;
import com.hotpads.datarouter.node.Node;
import com.hotpads.datarouter.node.factory.NodeFactory;
import com.hotpads.datarouter.node.op.combo.SortedMapStorage;
import com.hotpads.datarouter.node.op.combo.SortedMapStorage.SortedMapStorageNode;
import com.hotpads.datarouter.node.op.raw.IndexedStorage;
import com.hotpads.datarouter.node.op.raw.MapStorage.MapStorageNode;
import com.hotpads.datarouter.node.op.raw.SortedStorage;
import com.hotpads.datarouter.routing.BaseDataRouter;
import com.hotpads.datarouter.routing.DataRouterContext;
import com.hotpads.datarouter.test.DRTestConstants;
import com.hotpads.datarouter.test.node.basic.backup.BackupBean;
import com.hotpads.datarouter.test.node.basic.backup.BackupBean.BackupBeanFielder;
import com.hotpads.datarouter.test.node.basic.backup.BackupBeanKey;
import com.hotpads.datarouter.test.node.basic.backup.test.BackupIntegrationTests;
import com.hotpads.datarouter.test.node.basic.manyfield.AutoGeneratedKeyBean;
import com.hotpads.datarouter.test.node.basic.manyfield.AutoGeneratedKeyBean.AutoGeneratedKeyBeanFielder;
import com.hotpads.datarouter.test.node.basic.manyfield.AutoGeneratedKeyBeanKey;
import com.hotpads.datarouter.test.node.basic.manyfield.ManyFieldTypeBean;
import com.hotpads.datarouter.test.node.basic.manyfield.ManyFieldTypeBean.ManyFieldTypeBeanFielder;
import com.hotpads.datarouter.test.node.basic.manyfield.ManyFieldTypeBeanKey;
import com.hotpads.datarouter.test.node.basic.manyfield.test.AutoGeneratedKeyIntegrationTests;
import com.hotpads.datarouter.test.node.basic.manyfield.test.ManyFieldTypeIntegrationTests;
import com.hotpads.datarouter.test.node.basic.prefixed.ScatteringPrefixBean;
import com.hotpads.datarouter.test.node.basic.prefixed.ScatteringPrefixBean.ScatteringPrefixBeanFielder;
import com.hotpads.datarouter.test.node.basic.prefixed.ScatteringPrefixBeanKey;
import com.hotpads.datarouter.test.node.basic.prefixed.test.ScatteringPrefixIntegrationTests;
import com.hotpads.datarouter.test.node.basic.sorted.SortedBean;
import com.hotpads.datarouter.test.node.basic.sorted.SortedBean.SortedBeanFielder;
import com.hotpads.datarouter.test.node.basic.sorted.SortedBeanEntityKey;
import com.hotpads.datarouter.test.node.basic.sorted.SortedBeanKey;
import com.hotpads.datarouter.test.node.basic.sorted.test.SortedNodeIntegrationTests;
import com.hotpads.trace.node.TraceEntityNode;
import com.hotpads.util.core.ListTool;


@Singleton
public class BasicNodeTestRouter extends BaseDataRouter{

	public static final String 
			name = "basicNodeTest",
//			ENTITY_TraceEntity = "TraceEntity",
			ENTITY_ManyFieldTypeBeanEntity = "ManyFieldTypeBeanEntity",
			NODE_PREFIX_ManyFieldTypeBean = "MFTB",
			ENTITY_SortedBeanEntity = "SortedBeanEntity",
			NODE_PREFIX_SortedBean = "SB";
	
//	protected String clientName;
	
	public BasicNodeTestRouter(String clientName, Class<?> testType, boolean entity){
		super(new DataRouterContext(), name);
		
		if(ManyFieldTypeIntegrationTests.class.equals(testType)){
			if(entity){
				manyFieldTypeBeanNode = register(NodeFactory.create(clientName, ManyFieldTypeBean.class, ManyFieldTypeBeanFielder.class, 
						new Random().nextInt(), this));
			}else{
				manyFieldTypeBeanNode = register(NodeFactory.create(clientName, ManyFieldTypeBean.class, ManyFieldTypeBeanFielder.class, 
						new Random().nextInt(), this));
			}
		}
		if(SortedNodeIntegrationTests.class.equals(testType)){
			if(entity){
				sortedBeanNode = register(NodeFactory.entityNode(this, clientName, 
						SortedBeanEntityKey.class, SortedBean.class, SortedBeanFielder.class,
						ENTITY_SortedBeanEntity, NODE_PREFIX_SortedBean));
			}else{
				sortedBeanNode = register(NodeFactory.create(clientName, SortedBean.class, SortedBeanFielder.class, this));
			}
		}
		if(BackupIntegrationTests.class.equals(testType)){
			backupBeanNode = register(NodeFactory.create(clientName, BackupBean.class, BackupBeanFielder.class, this));
			backupRecordNode = register(NodeFactory.create(clientName, BackupRecord.class, BackupRecordFielder.class, this));
		}
		if(ScatteringPrefixIntegrationTests.class.equals(testType)){
			scatteringPrefixBeanNode = register(NodeFactory.create(clientName, 
//					"ScatteringPrefixBean8", ScatteringPrefixBean.class.getName(),//optional test to make sure hbase table naming working
					ScatteringPrefixBean.class, ScatteringPrefixBeanFielder.class, this));
		}
		if(AutoGeneratedKeyIntegrationTests.class.equals(testType)){
			autoGeneratedKeyBeanNode = register(NodeFactory.create(clientName, AutoGeneratedKeyBean.class, AutoGeneratedKeyBeanFielder.class, this));
		}
		
//		this.clientName = clientName;
		registerWithContext();//do after field inits
	}

	/********************************** config **********************************/
		
	@Override
	public String getConfigLocation(){
		return DRTestConstants.CONFIG_PATH;
	}

	public static final List<ClientId> CLIENT_IDS = ListTool.create(
			new ClientId(DRTestConstants.CLIENT_drTestJdbc0, true),
			new ClientId(DRTestConstants.CLIENT_drTestHibernate0, true),
			new ClientId(DRTestConstants.CLIENT_drTestHBase, true),
			new ClientId(DRTestConstants.CLIENT_drTestMemcached, true));
	
	@Override
	public List<ClientId> getClientIds(){
		return CLIENT_IDS;
	}


	
	/********************************** nodes **********************************/
	
	protected Node<ManyFieldTypeBeanKey,ManyFieldTypeBean> manyFieldTypeBeanNode;
	protected Node<SortedBeanKey,SortedBean> sortedBeanNode;
	protected Node<ScatteringPrefixBeanKey,ScatteringPrefixBean> scatteringPrefixBeanNode;
	protected Node<BackupBeanKey,BackupBean> backupBeanNode;
	protected Node<BackupRecordKey,BackupRecord> backupRecordNode;
	protected Node<AutoGeneratedKeyBeanKey, AutoGeneratedKeyBean> autoGeneratedKeyBeanNode;
//	protected TraceEntityNode traceEntity = new TraceEntityNode(ENTITY_TraceEntity, this, 
//			DRTestConstants.CLIENT_drTestHBase);
	
	
	/*************************** get/set ***********************************/

	public MapStorageNode<ManyFieldTypeBeanKey,ManyFieldTypeBean> manyFieldTypeBean() {
		return cast(manyFieldTypeBeanNode);
	}

	public SortedMapStorage<SortedBeanKey,SortedBean> sortedBean(){
		return cast(sortedBeanNode);
	}

	public SortedMapStorage<ScatteringPrefixBeanKey,ScatteringPrefixBean> scatteringPrefixBean(){
		return cast(scatteringPrefixBeanNode);
	}

	public SortedMapStorageNode<BackupBeanKey,BackupBean> backupBeanNode(){
		return cast(backupBeanNode);
	}

	public SortedMapStorageNode<BackupRecordKey,BackupRecord> backupRecordNode(){
		return cast(backupRecordNode);
	}
	
	public SortedMapStorage<AutoGeneratedKeyBeanKey,AutoGeneratedKeyBean> autoGeneratedKeyBean(){
		return cast(autoGeneratedKeyBeanNode);
	}
	
//	public TraceEntityNode traceEntity(){
//		return traceEntity;
//	}
	
	
	/************************ sorted and indexed versions of this router *****************/
	
	public static class SortedBasicNodeTestRouter extends BasicNodeTestRouter{
		public SortedBasicNodeTestRouter(String client, Class<?> testType, boolean entity){
			super(client, testType, entity);
		}
		public SortedMapStorage<SortedBeanKey,SortedBean> sortedBeanSorted(){
			return cast(sortedBeanNode);
		}
		public SortedStorage<ScatteringPrefixBeanKey,ScatteringPrefixBean> scatteringPrefixBeanSorted(){
			return cast(scatteringPrefixBeanNode);
		}
	}
	
	public static class IndexedBasicNodeTestRouter extends SortedBasicNodeTestRouter{
		public IndexedBasicNodeTestRouter(String client, Class<?> testType, boolean entity){
			super(client, testType, entity);
		}
		public IndexedStorage<SortedBeanKey,SortedBean> sortedBeanIndexed(){
			return cast(sortedBeanNode);
		}
	}

	
	/*************************** get/set *****************************/
	
//	public BasicNodeTestRouter setClientName(String clientName) {
//		this.clientName = clientName;
//		return this;
//	}

	

}





