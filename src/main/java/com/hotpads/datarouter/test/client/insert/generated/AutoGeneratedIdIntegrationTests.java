package com.hotpads.datarouter.test.client.insert.generated;

import java.util.List;
import java.util.UUID;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import com.google.inject.Injector;
import com.hotpads.datarouter.node.op.combo.SortedMapStorage;
import com.hotpads.datarouter.test.DatarouterTestInjectorProvider;
import com.hotpads.datarouter.test.client.insert.generated.managed.PutOpIdGeneratedManagedTestBean;
import com.hotpads.datarouter.test.client.insert.generated.managed.PutOpIdGeneratedManagedTestBeanKey;
import com.hotpads.datarouter.test.client.insert.generated.random.PutOpIdGeneratedRandomTestBean;
import com.hotpads.datarouter.test.client.insert.generated.random.PutOpIdGeneratedRandomTestBeanKey;
import com.hotpads.util.core.IterableTool;
import com.hotpads.util.core.ListTool;

public class AutoGeneratedIdIntegrationTests{
	
	private final static int A_LOT = 1000;
	private final static int BATCH = 100;
	private final static int THREADS = 20;
	
	private SortedMapStorage<PutOpIdGeneratedManagedTestBeanKey, PutOpIdGeneratedManagedTestBean> nodeWithManagedId;
	private SortedMapStorage<PutOpIdGeneratedRandomTestBeanKey, PutOpIdGeneratedRandomTestBean> nodeWithRandomId;
	
	@Before
	public void setup() throws Exception{
		Injector injector = new DatarouterTestInjectorProvider().get();
		AutoGeneratedIdTestRouter router = injector.getInstance(AutoGeneratedIdTestRouter.class);
		nodeWithManagedId = router.putOpIdGeneratedManaged;
		nodeWithRandomId = router.putOpIdGeneratedRandom;
	}
	
	@After
	public void cleanup(){
		nodeWithManagedId.deleteAll(null);
		nodeWithRandomId.deleteAll(null);
	}
	
	@Test
	public void threadedInsertOne() throws Exception{
		threadedInsert(1, nodeWithManagedId, PutOpIdGeneratedManagedTestBean.class);
		threadedInsert(1, nodeWithRandomId, PutOpIdGeneratedRandomTestBean.class);
	}
	
	@Test
	public void threadedInsertMulti() throws Exception{
		threadedInsert(BATCH, nodeWithManagedId, PutOpIdGeneratedManagedTestBean.class);
		threadedInsert(BATCH, nodeWithRandomId, PutOpIdGeneratedRandomTestBean.class);
	}
	
	private <PK extends PutOpGeneratedTestBeanKey<PK>, D extends PutOpGeneratedTestBean<PK, D>> void threadedInsert(
			final int batchSize, final SortedMapStorage<PK, D> node, final Class<D> databeanClass)
			throws Exception{
		ThreadPoolExecutor service = new ThreadPoolExecutor(THREADS, THREADS, 0L, TimeUnit.MILLISECONDS,
				new ArrayBlockingQueue<Runnable>(2000), new ThreadPoolExecutor.CallerRunsPolicy());
		Long beforeCount = IterableTool.count(node.scanKeys(null, null));
		List<Future<Void>> futures = ListTool.create();
		for(int i = 0 ; i < A_LOT ; i+=batchSize){
			futures.add(service.submit(new Callable<Void>(){

				@Override
				public Void call() throws Exception{
					if(batchSize == 1){
						insertOne(node, databeanClass);
					}else{
						insertMulti(node, databeanClass, batchSize);
					}
					return null;
				}
				
			}));
		}
		service.shutdown();
		service.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
		Assert.assertEquals((Long)(beforeCount + A_LOT), IterableTool.count(node.scanKeys(null, null)));
		int exceptions = 0;
		for(Future<Void> future : futures){
			try{
				future.get();
			}catch (ExecutionException e){
				exceptions++;
			}
		}
		Assert.assertEquals(0, exceptions);
	}
	
	private <PK extends PutOpGeneratedTestBeanKey<PK>, D extends PutOpGeneratedTestBean<PK, D>> void insertOne(
			SortedMapStorage<PK, D> node, Class<D> databeanClass) throws Exception{
		D bean = getNewBean(databeanClass);
		Assert.assertNull(bean.getKey().getId());
		
		node.put(bean, null);
		Assert.assertNotNull(bean.getKey().getId());
	}
	
	private <PK extends PutOpGeneratedTestBeanKey<PK>, D extends PutOpGeneratedTestBean<PK, D>> void insertMulti(
			SortedMapStorage<PK, D> node, Class<D> databeanClass, int batchSize) throws Exception{
		List<D> beans = ListTool.create();
		for(int i = 0 ; i < batchSize ; i++){
			beans.add(getNewBean(databeanClass));
		}
		node.putMulti(beans, null);
		for(D bean : beans){
			Assert.assertNotNull(bean.getKey().getId());
		}
	}
	
	private <PK extends PutOpGeneratedTestBeanKey<PK>, D extends PutOpGeneratedTestBean<PK, D>> D getNewBean(
			Class<D> databeanClass) throws Exception{
		return databeanClass.getConstructor(String.class).newInstance(UUID.randomUUID().toString().substring(0, 10));
	}

}
