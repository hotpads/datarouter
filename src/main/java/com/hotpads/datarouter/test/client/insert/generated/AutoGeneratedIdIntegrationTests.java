package com.hotpads.datarouter.test.client.insert.generated;

import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.RandomStringUtils;
import org.junit.Assert;
import org.junit.Test;

import com.google.inject.Guice;
import com.google.inject.Injector;
import com.hotpads.datarouter.storage.field.Field;
import com.hotpads.datarouter.storage.field.FieldTool;
import com.hotpads.datarouter.storage.key.multi.BaseLookup;
import com.hotpads.datarouter.test.client.BasicClientTestRouter;
import com.hotpads.util.core.ListTool;

public class AutoGeneratedIdIntegrationTests{
	
	private final static int A_LOT = 100000;
	
	private BasicClientTestRouter router;
	
	public AutoGeneratedIdIntegrationTests(){
		Injector injector = Guice.createInjector();
		router = injector.getInstance(BasicClientTestRouter.class);
		router.getPutOpIdGeneratedTest().deleteAll(null);
	}
	
	@Test
	public void threadedInsertOneALot() throws InterruptedException{
		threadedInsertALot(1);
	}
	
	@Test
	public void threadedInsertMultiALot() throws InterruptedException{
		threadedInsertALot(100);
	}
	
	public void threadedInsertALot(final int batchSize) throws InterruptedException{
		ThreadPoolExecutor service = new ThreadPoolExecutor(20, 20, 0L, TimeUnit.MILLISECONDS,
				new ArrayBlockingQueue<Runnable>(2000), new ThreadPoolExecutor.CallerRunsPolicy());
		Long beforeCount = count();
		List<Future<Void>> futures = ListTool.create();
		for(int i = 0 ; i < A_LOT ; i+=batchSize){
			futures.add(service.submit(new Callable<Void>(){

				@Override
				public Void call() throws Exception{
					if(batchSize == 1){
						insertOne();
					}else{
						insertMulti(batchSize);
					}
					return null;
				}
				
			}));
		}
		service.shutdown();
		service.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
		Assert.assertEquals((Long)(beforeCount + A_LOT), count());
		int exceptions = 0;
		for(Future<Void> future : futures){
			try{
				future.get();
			}catch (ExecutionException e){
				exceptions++;
			}
		}
		Assert.assertEquals(0, exceptions);
	}
	
	@SuppressWarnings("serial")
	private Long count(){
		return router.getPutOpIdGeneratedTest().count(new BaseLookup<PutOpIdGeneratedTestBeanKey>(){
			@Override
			public List<Field<?>> getFields(){
				return FieldTool.createList();
			}
		}, null);
	}
	
	private void insertOne(){
		PutOpIdGeneratedTestBean bean = getNewBean();
		Assert.assertNull(bean.getKey().getId());
		
		router.getPutOpIdGeneratedTest().put(bean, null);
		Assert.assertNotNull(bean.getKey().getId());
	}
	
	private void insertMulti(int batchSize){
		List<PutOpIdGeneratedTestBean> beans = ListTool.create();
		for(int i = 0 ; i < batchSize ; i++){
			beans.add(getNewBean());
		}
		router.getPutOpIdGeneratedTest().putMulti(beans, null);
		for(PutOpIdGeneratedTestBean bean : beans){
			Assert.assertNotNull(bean.getKey().getId());
		}
	}
	
	private PutOpIdGeneratedTestBean getNewBean(){
		return new PutOpIdGeneratedTestBean(RandomStringUtils.randomAlphabetic(10));
	}
}
