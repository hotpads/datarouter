package com.hotpads.datarouter.client.imp.hibernate.op.write;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.List;

import org.hibernate.Session;

import com.hotpads.datarouter.client.ClientType;
import com.hotpads.datarouter.client.imp.hibernate.node.HibernateNode;
import com.hotpads.datarouter.client.imp.hibernate.op.BaseHibernateOp;
import com.hotpads.datarouter.client.imp.hibernate.util.JdbcTool;
import com.hotpads.datarouter.config.Config;
import com.hotpads.datarouter.config.Isolation;
import com.hotpads.datarouter.config.PutMethod;
import com.hotpads.datarouter.exception.DataAccessException;
import com.hotpads.datarouter.serialize.fielder.DatabeanFielder;
import com.hotpads.datarouter.storage.databean.Databean;
import com.hotpads.datarouter.storage.field.Field;
import com.hotpads.datarouter.storage.field.FieldTool;
import com.hotpads.datarouter.storage.field.imp.positive.UInt63Field;
import com.hotpads.datarouter.storage.key.primary.PrimaryKey;
import com.hotpads.datarouter.util.DRCounters;
import com.hotpads.trace.TraceContext;
import com.hotpads.util.core.CollectionTool;
import com.hotpads.util.core.java.ReflectionTool;

public class HibernatePutOp<
		PK extends PrimaryKey<PK>,
		D extends Databean<PK,D>,
		F extends DatabeanFielder<PK,D>> 
extends BaseHibernateOp<Void>{
	
	public static final PutMethod DEFAULT_PUT_METHOD = PutMethod.SELECT_FIRST_OR_LOOK_AT_PRIMARY_KEY;
	
	private HibernateNode<PK,D,F> node;
	private String opName;
	private Collection<D> databeans;
	private Config config;
	
	public HibernatePutOp(HibernateNode<PK,D,F> node, String opName, Collection<D> databeans, Config config) {
		super(node.getDataRouterContext(), node.getClientNames(), getIsolation(config), 
				shouldAutoCommit(databeans, config));
		this.node = node;
		this.opName = opName;
		this.databeans = databeans;
		this.config = config;
	}
	
	@Override
	public Void runOnce(){
		ClientType clientType = node.getFieldInfo().getFieldAware() ? ClientType.jdbc : ClientType.hibernate;
		DRCounters.incSuffixClientNode(clientType, opName, node.getClientName(), node.getName());
		try{
			TraceContext.startSpan(node.getName()+" "+opName);
			Session session = getSession(node.getClientName());
			final String entityName = node.getPackagedTableName();
			for(D databean : CollectionTool.nullSafe(databeans)){
				if(node.getFieldInfo().getFieldAware()){
					jdbcPutUsingMethod(session.connection(), entityName, databean, config, DEFAULT_PUT_METHOD);
				}else{
					hibernatePutUsingMethod(session, entityName, databean, config, DEFAULT_PUT_METHOD);
				}
			}
			return null;
		}finally{
			TraceContext.finishSpan();
		}
	}
	

	
	/******************** private **********************************************/
	
	private static Isolation getIsolation(Config config){
		if(config==null){ return Config.DEFAULT_ISOLATION; }
		return config.getIsolationOrUse(Config.DEFAULT_ISOLATION);
	}
	
	/*
	 * mirror of of above "putUsingMethod"
	 */
	private static boolean shouldAutoCommit(Collection<? extends Databean<?,?>> databeans, final Config config){
		if(CollectionTool.size(databeans) > 1){ return false; }
		PutMethod putMethod = DEFAULT_PUT_METHOD;
		if(config!=null && config.getPutMethod()!=null){
			putMethod = config.getPutMethod();
		}
		if(PutMethod.INSERT_OR_BUST == putMethod){
			return true;
		}else if(PutMethod.UPDATE_OR_BUST == putMethod){
			return true;
		}else if(PutMethod.INSERT_OR_UPDATE == putMethod){
			return false;
		}else if(PutMethod.UPDATE_OR_INSERT == putMethod){
			return false;
		}else if(PutMethod.MERGE == putMethod){
			return false;
		}else{
			return false;
		}
	}
	
	private boolean needsIdGenerated(Databean<PK,D> databean){
		List<Field<?>> fields = databean.getKeyFields();
		for (Field<?> f : fields) {
			if (f instanceof UInt63Field) {
				UInt63Field uInt63Field = (UInt63Field) f;
				if (uInt63Field.isAutoGenerated() && uInt63Field.getValue() == null) {
					return true;
				}
			}
		}
		
		return false;
	}
	
	private void hibernatePutUsingMethod(Session session, String entityName, Databean<PK,D> databean, 
			final Config config, PutMethod defaultPutMethod){
		
		PutMethod putMethod = defaultPutMethod;
		if(config!=null && config.getPutMethod()!=null){
			putMethod = config.getPutMethod();
		}
		if(PutMethod.INSERT_OR_BUST == putMethod){
			session.save(entityName, databean);
		}else if(PutMethod.UPDATE_OR_BUST == putMethod){
			session.update(entityName, databean);
		}else if(PutMethod.INSERT_OR_UPDATE == putMethod){
			try{
				session.save(entityName, databean);
				session.flush();//seems like it tries to save 3 times before throwing an exception
			}catch(RuntimeException e){  
				session.evict(databean);  //must evict or it will ignore future actions for the databean?
				session.update(entityName, databean);
			}
		}else if(PutMethod.UPDATE_OR_INSERT == putMethod){
			try{
				session.update(entityName, databean);
				session.flush();
			}catch(RuntimeException e){
				session.evict(databean);  //must evict or it will ignore future actions for the databean?
				session.save(entityName, databean);
			}
		}else if(PutMethod.MERGE == putMethod){
			session.merge(entityName, databean);
		}else{
			session.saveOrUpdate(entityName, databean);
		}
	}
	
	private void jdbcPutUsingMethod(Connection connection, String entityName, Databean<PK,D> databean,
			final Config config, PutMethod defaultPutMethod){
		PutMethod putMethod = defaultPutMethod;
		if(config!=null && config.getPutMethod()!=null){
			putMethod = config.getPutMethod();
		}
		boolean generateId = node.getFieldInfo().isAutogeneratedId() && needsIdGenerated(databean);
		if(PutMethod.INSERT_OR_BUST == putMethod){
			jdbcInsert(connection, entityName, databean);
		}else if(PutMethod.UPDATE_OR_BUST == putMethod){
			jdbcUpdate(connection, entityName, databean);
		}else if(PutMethod.INSERT_OR_UPDATE == putMethod){
			try{
				jdbcInsert(connection, entityName, databean);
			}catch(RuntimeException e){  
				//TODO this will not work inside a txn if not all of the rows already exist
				jdbcUpdate(connection, entityName, databean);
			}
		}else if(PutMethod.UPDATE_OR_INSERT == putMethod){
			try{
				jdbcUpdate(connection, entityName, databean);
			}catch(RuntimeException e){
				//TODO this will not work inside a txn if some of the rows already exist
				jdbcInsert(connection, entityName, databean);
			}
		}else if(PutMethod.MERGE == putMethod){
			//not really a jdbc concept, but usually an update (?)
			try{
				jdbcUpdate(connection, entityName, databean);
			}catch(RuntimeException e){
				jdbcInsert(connection, entityName, databean);
			}
		}else{
			//TODO weird to call back to node.exists
			if(node.exists(databean.getKey(), null) && !generateId){//select before update like hibernate's saveOrUpdate
				jdbcUpdate(connection, entityName, databean);
			}else{
				jdbcInsert(connection, entityName, databean);
			}
		}
	}

	private void jdbcInsert(Connection connection, String entityName, Databean<PK,D> databean){
//		logger.warn("JDBC Insert");
		StringBuilder sb = new StringBuilder();
		sb.append("insert into "+node.getTableName()+" (");
		FieldTool.appendCsvColumnNames(sb, node.getFieldInfo().getFields());
		sb.append(") values (");
		JdbcTool.appendCsvQuestionMarks(sb, CollectionTool.size(node.getFieldInfo().getFields()));
		sb.append(")");
		try{
			PreparedStatement ps = connection.prepareStatement(sb.toString(), Statement.RETURN_GENERATED_KEYS);
			int parameterIndex = 1;//one based
			for(Field<?> field : databean.getFields()){
				field.setPreparedStatementValue(ps, parameterIndex);
				++parameterIndex;
			}
			ps.execute();
			// set autogenerated id
			if(node.getFieldInfo().isAutogeneratedId()){
				//Retrieve the generated id from DB
				ResultSet resultSet = ps.getGeneratedKeys();
				resultSet.next();
				Long id = resultSet.getLong(1);
				//set the id
				String autoGeneratedFieldName = node.getFieldInfo().getAutogeneratedFieldName();
				Class<?> primaryKeyClass = node.getFieldInfo().getPrimaryKeyClass();
				java.lang.reflect.Field autogeneratedField = primaryKeyClass.getDeclaredField(autoGeneratedFieldName);
				ReflectionTool.get(autogeneratedField, databean.getKey());
				ReflectionTool.set(autogeneratedField, databean.getKey(), id);
			}
		}catch(Exception e){
			throw new DataAccessException("error inserting into "+node.getTableName(),e);
		}
	}
	
	private void jdbcUpdate(Connection connection, String entityName, Databean<PK,D> databean){
//		logger.warn("JDBC update");
		StringBuilder sb = new StringBuilder();
		sb.append("update "+node.getTableName()+" set ");
		FieldTool.appendSqlUpdateClauses(sb, node.getFieldInfo().getNonKeyFields());
		sb.append(" where ");
		sb.append(FieldTool.getSqlNameValuePairsEscapedConjunction(databean.getKeyFields()));
		int numUpdated;
		try{
			PreparedStatement ps = connection.prepareStatement(sb.toString());
			int parameterIndex = 1;
			for(Field<?> field : databean.getNonKeyFields()){
				field.setPreparedStatementValue(ps, parameterIndex);
				++parameterIndex;
			}
			numUpdated = ps.executeUpdate();
		}catch(SQLException e){
			throw new DataAccessException("error updating "+node.getTableName(),e);
		}
		if(numUpdated!=1){
			throw new DataAccessException(node.getTableName()+" row "+databean.getKey().toString()+" not found so could not be " +
					"updated");
		}
	}
}
